# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        
       def kth(temp,k):
            while temp and k > 1 :
                k-=1
                temp = temp.next
            return temp
       def reverse(start):
            prev = None
            curr = start
            while curr :
                next_n = curr.next
                curr.next = prev
                prev = curr
                curr = next_n
            return prev
       dummy = ListNode(0,head)
       prev_group = dummy
       temp =  head

       while temp :
            kth_group = kth(temp,k)
            if not kth_group:
                break
            next_node = kth_group.next
            kth_group.next = None

            reverse_head = reverse(temp)

            prev_group.next = reverse_head

            temp.next = next_node
            prev_group = temp
            temp = next_node
       return dummy.next
