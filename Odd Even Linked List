# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def oddEvenList(self, head: Optional[ListNode]) -> Optional[ListNode]:

        # if head is None or head.next is None:
        #     return head
        # res = []
        # temp = head
        # while temp!= None and temp.next!=None:
        #     res.append(temp.val)
        #     temp = temp.next.next
        # if temp :
        #     res.append(temp.val)
        # temp = head.next
        # while temp!= None and temp.next!=None:
        #     res.append(temp.val)
        #     temp = temp.next.next
        # if temp :
        #     res.append(temp.val)

        # temp = head
        # i = 0
        # while temp :
        #     temp.val = res[i]
        #     temp = temp.next
        #     i+=1
        # return head
        if not head or not head.next:
            return head
        odd = head
        even = head.next
        even_start = head.next
        while even and even.next :
            
            odd.next = odd.next.next
            odd = odd.next

            even.next = even.next.next
            even = even.next

        odd.next = even_start
        return head
        
